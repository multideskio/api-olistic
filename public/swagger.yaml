openapi: 3.0.0
info:
  title: 'Holistic Therapy API'
  description: 'API to demonstrate basic endpoints'
  contact:
    email: multidesk.io@gmail.com
  version: '0.1'
servers:
  -
    url: 'http://localhost:8000'
    description: 'Local server'
  -
    url: 'https://terapia.conect.app'
    description: 'Online server'
  -
    url: 'http://5.161.224.69:8800'
    description: 'Online server'
paths:
  /api/v1/oauth:
    post:
      tags:
        - Authentication
      summary: 'User login'
      description: 'Authenticates the user and returns a JWT token'
      operationId: 919872ddafdc52ec2e298fe45e58364d
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: '123456'
              type: object
      responses:
        '200':
          description: 'JWT token successfully generated'
          content:
            application/json:
              schema:
                properties:
                  token: { type: string, example: eyJhbGciOiJIUzI1NiIsInR... }
                type: object
        '401':
          description: 'Invalid credentials'
        '400':
          description: 'Invalid input data'
  /api/v1/logout:
    get:
      tags:
        - Authentication
      summary: 'User logout'
      description: 'Performs logout and invalidates the JWT token'
      operationId: f9413ca466b6033b3b76dbc7823c0d85
      responses:
        '200':
          description: 'Logout successful'
        '401':
          description: 'Invalid or missing token'
      security:
        -
          bearerAuth: []
  /api/v1/customers:
    get:
      tags:
        - Customers
      summary: 'List all customers'
      description: 'Returns a paginated list of customers'
      operationId: cfef2f8160bbb288816b3fd50fbe699b
      parameters:
        -
          name: sort_by
          in: query
          description: 'Field to sort results by'
          required: false
          schema:
            type: string
            default: id
            enum:
              - id
              - update
        -
          name: order
          in: query
          description: 'Sort order (ASC or DESC)'
          required: false
          schema:
            type: string
            default: ASC
            enum:
              - ASC
              - DESC
        -
          name: s
          in: query
          description: 'Search term to filter customers'
          required: false
          schema:
            type: string
        -
          name: limit
          in: query
          description: 'Number of items per page'
          required: false
          schema:
            type: integer
            default: 15
            maximum: 200
        -
          name: page
          in: query
          description: 'Page number for pagination'
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: 'Customer list'
          content:
            application/json:
              schema:
                properties:
                  rows: { type: array, items: { type: object } }
                  pagination: { type: object }
                type: object
        '401':
          description: 'Invalid or missing token'
        '500':
          description: 'Internal server error'
      security:
        -
          bearerAuth: []
    post:
      tags:
        - Customers
      summary: 'Create a new customer'
      description: 'Creates a new customer with the provided data'
      operationId: 42b0a2c98ea46de34f810bae6f78a3b2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                photo:
                  type: string
                  nullable: true
                birthDate:
                  type: string
                  format: date
                  nullable: true
                doc:
                  type: string
                  nullable: true
                generous:
                  type: string
                  nullable: true
              type: object
      responses:
        '201':
          description: 'Customer successfully created'
        '401':
          description: 'Invalid or missing token'
        '403':
          description: 'User not authorized'
        '422':
          description: 'Validation error'
        '500':
          description: 'Internal server error'
      security:
        -
          bearerAuth: []
  '/api/v1/customers/{id}':
    get:
      tags:
        - Customers
      summary: 'Get customer details'
      description: 'Returns the details of a specific customer'
      operationId: 41841ce6e3057a13ab532a7ab1f96af6
      parameters:
        -
          name: id
          in: path
          description: 'Customer ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Customer details'
          content:
            application/json:
              schema:
                type: object
        '401':
          description: 'Invalid or missing token'
        '404':
          description: 'Customer not found'
        '500':
          description: 'Internal server error'
      security:
        -
          bearerAuth: []
    put:
      tags:
        - Customers
      summary: 'Update a customer'
      description: 'Updates the data of an existing customer'
      operationId: 05e9e14aa12404b2a58d51869e1505f7
      parameters:
        -
          name: id
          in: path
          description: 'Customer ID'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                photo:
                  type: string
                  nullable: true
                birthDate:
                  type: string
                  format: date
                  nullable: true
                doc:
                  type: string
                  nullable: true
                generous:
                  type: string
                  nullable: true
              type: object
      responses:
        '200':
          description: 'Customer successfully updated'
        '401':
          description: 'Invalid or missing token'
        '404':
          description: 'Customer not found'
        '422':
          description: 'Validation error'
        '500':
          description: 'Internal server error'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - Customers
      summary: 'Delete a customer'
      description: 'Deletes an existing customer'
      operationId: b96d5675d3de38142446856e2258f0fb
      parameters:
        -
          name: id
          in: path
          description: 'Customer ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Customer successfully deleted'
        '401':
          description: 'Invalid or missing token'
        '404':
          description: 'Customer not found'
        '500':
          description: 'Internal server error'
      security:
        -
          bearerAuth: []
  /api/v1/user/me:
    get:
      tags:
        - Users
      summary: 'Get authenticated user information'
      description: 'Returns the information of the authenticated user using JWT'
      operationId: c01da61cb97dc778549fec55810d4b26
      responses:
        '200':
          description: 'User information'
          content:
            application/json:
              schema:
                properties:
                  id: { type: integer, example: 1 }
                  name: { type: string, example: 'John Doe' }
                  email: { type: string, example: john.doe@example.com }
                  role: { type: string, example: PROFESSIONAL }
                  type: { type: string, example: cache }
                type: object
        '401':
          description: 'Unauthorized'
      security:
        -
          bearerAuth: []
  /api/v1/users:
    get:
      tags:
        - Users
      summary: 'List users'
      description: 'Returns a list of users, with cache using Redis'
      operationId: fb3b9d612f472659bcf1ab9f534217bd
      responses:
        '200':
          description: 'User list'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: cache }
                  data: { type: array, items: { properties: { user: { type: integer, example: 1 }, name: { type: string, example: 'John Doe' }, email: { type: string, example: john.doe@example.com } }, type: object } }
                type: object
        '401':
          description: 'Invalid or missing token'
        '403':
          description: 'User not authorized'
      security:
        -
          bearerAuth: []
  /:
    get:
      tags:
        - Status
      summary: 'Status endpoint'
      description: 'Returns the application status'
      operationId: 5b8bbea83af70a9a8a53b270333d2915
      responses:
        '200':
          description: 'Application status'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: Development }
                  version: { type: string, example: 1.0.0 }
                  php: { type: string, example: 8.1.2 }
                type: object
components:
  securitySchemes:
    bearerAuth:
      type: http
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: Status
    description: ''
  -
    name: Authentication
    description: 'Operations related to user authentication'
  -
    name: Users
    description: 'User management'
  -
    name: Customers
    description: 'Customers'